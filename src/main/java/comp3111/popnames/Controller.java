/**
 * Building on the sample skeleton for 'ui.fxml' Controller Class generated by SceneBuilder
 */
package comp3111.popnames;

import comp3111.popnames.core.ChartSetter;
import comp3111.popnames.core.FileReader;
import comp3111.popnames.core.OccurrenceRecord;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.PieChart;
import javafx.scene.control.*;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import org.apache.commons.lang3.StringUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class Controller {

    ObservableList<String> genderChoice = FXCollections.observableArrayList("M","F");
    ObservableList<String> ageChoice = FXCollections.observableArrayList("Young","Old");
    ObservableList<String> ageChoice2 = FXCollections.observableArrayList("Younger","Older");
    ObservableList<String> algorithmChoice = FXCollections.observableArrayList("T5X1","T5X2");
    ObservableList<String> algorithmChoice2 = FXCollections.observableArrayList("T6X1","T6X2");

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldNameF;

    @FXML
    private TextField textfieldYear;

    @FXML
    private Button buttonRankM;

    @FXML
    private TextField textfieldNameM;

    @FXML
    private Button buttonRankF;

    @FXML
    private Button buttonTopM;

    @FXML
    private Button buttonTopF;

    @FXML
    private Button buttonSummary;

    @FXML
    private Tab tabReport1;

    @FXML
    private TextArea p1DescriputionBox;

    @FXML
    private TextField p1YearField;

    @FXML
    private TextField p1NField;

    @FXML
    private Button p1ResetButton;

    @FXML
    private Button p1SubmitButton;

    @FXML
    private Label p1YearErrorLabel;

    @FXML
    private Label p1NErrorLabel;

    @FXML
    private ToggleGroup T1;

    @FXML
    private Tab tabReport2;

    @FXML
    private ToggleGroup T11;

    @FXML
    private TextArea task2IntroBox;

    @FXML
    private TextField task2Year1TextField;

    @FXML
    private TextField task2Year2TextField;

    @FXML
    private TextField task2KTextField;

    @FXML
    private Label task2Year1ErrorLabel;

    @FXML
    private Label task2Year2ErrorLabel;

    @FXML
    private Label task2KErrorLabel;

    @FXML
    private ChoiceBox task2GenderChoiceBox;

    @FXML
    private Button task2SubmitButton;

    @FXML
    private Button task2ResetButton;

    @FXML
    private Tab tabReport3;

    @FXML
    private ToggleGroup T111;
    
    @FXML
    private TextArea task3IntroBox;

    @FXML
    private TextField task3Year1TextField;

    @FXML
    private TextField task3Year2TextField;

    @FXML
    private TextField task3NameTextField;

    @FXML
    private Label task3Year1ErrorLabel;

    @FXML
    private Label task3Year2ErrorLabel;

    @FXML
    private Label task3NameErrorLabel;

    @FXML
    private ChoiceBox task3GenderChoiceBox;

    @FXML
    private Button task3SubmitButton;

    @FXML
    private Button task3ResetButton;

    @FXML
    private Tab tabApp1;

    @FXML
    private Tab tabApp2;

    @FXML
    private TextArea task5IntroBox;

    @FXML
    private TextField task5iNameTextField;

    @FXML
    private ChoiceBox task5iGenderChoiceBox;

    @FXML
    private TextField task5iAgeTextField;

    @FXML
    private ChoiceBox task5iGenderMateChoiceBox;

    @FXML
    private ChoiceBox task5iPreferenceChoiceBox;

    @FXML
    private ChoiceBox task5AlgorithmChoiceBox;

    @FXML
    private Button task5SubmitButton;

    @FXML
    private Label task5iNameErrorLabel;

    @FXML
    private Label task5iAgeErrorLabel;

    @FXML
    private Button task5ResetButton;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextArea textAreaConsole;
    
    @FXML
    private TextField task6UserName;
    
    @FXML
    private TextField task6MateName;
    
    @FXML
    private TextField task6SelfYOB;
    
    @FXML
    private ChoiceBox task6SelfGenderBox;
    
    @FXML
    private ChoiceBox task6MateGenderBox;
    
    @FXML
    private ChoiceBox task6AgePreferenceBox;
    
    @FXML
    private ChoiceBox task6AlgorithmChoiceBox;
    
    @FXML
    private Label task6UserNameErrorLabel;

    @FXML
    private Label task6MateNameErrorLabel;
    
    @FXML
    private Label task6SelfYOBErrorLabel;
    
    @FXML
    private Button task6SubmitButton;
    
    @FXML
    private Button task6ResetButton;

    @FXML
    private TableView<?> outputTable;

    @FXML
    private BarChart<String, Number> outputBarChart1;

    @FXML
    private BarChart<String, Number> outputBarChart2;

    @FXML
    private PieChart outputPieChart1;

    @FXML
    private PieChart outputPieChart2;

    @FXML
    private LineChart<Integer, Integer> outputLineChart1;

    @FXML
    private LineChart<Integer, Integer> outputLineChart2;

    @FXML
    private Button summaryButton;

    @FXML
    private Button tableButton;

    @FXML
    private Button barButton;

    @FXML
    private Button pieButton;

    @FXML
    private Button lineButton;

    @FXML
    private AnchorPane outputPanel;

    // ----------------------------- Task0 Functions ------------------------//

    /**
     * Task Zero
     * To be triggered by the "Summary" button on the Task Zero Tab
     */
    @FXML
    void doSummary() {
        int year = Integer.parseInt(textfieldYear.getText());
        String oReport = AnalyzeNames.getSummary(year);
        textAreaConsole.setText(oReport);
    }


    /**
     * Task Zero
     * To be triggered by the "Rank (female)" button on the Task Zero Tab
     */
    @FXML
    void doRankF() {
        String oReport = "";
        String iNameF = textfieldNameF.getText();
        int iYear = Integer.parseInt(textfieldYear.getText());
        int oRank = AnalyzeNames.getRank(iYear, iNameF, "F");
        if (oRank == -1)
            oReport = String.format("The name %s (female) has not been ranked in the year %d.\n", iNameF, iYear);
        else
            oReport = String.format("Rank of %s (female) in year %d is #%d.\n", iNameF, iYear, oRank);
        textAreaConsole.setText(oReport);
    }


    /**
     * Task Zero
     * To be triggered by the "Rank (male)" button on the Task Zero Tab
     */
    @FXML
    void doRankM() {
        String oReport = "";
        String iNameM = textfieldNameM.getText();
        int iYear = Integer.parseInt(textfieldYear.getText());
        int oRank = AnalyzeNames.getRank(iYear, iNameM, "M");
        if (oRank == -1)
            oReport = String.format("The name %s (male) has not been ranked in the year %d.\n", iNameM, iYear);
        else
            oReport = String.format("Rank of %s (male) in year %d is #%d.\n", iNameM, iYear, oRank);
        textAreaConsole.setText(oReport);
    }


    /**
     * Task Zero
     * To be triggered by the "Top 5 (female)" button on the Task Zero Tab
     */
    @FXML
    void doTopF() {
        String oReport = "";
        final int topN = 5;
        int iYear = Integer.parseInt(textfieldYear.getText());
        oReport = String.format("Top %d most popular names (female) in the year %d:\n", topN, iYear);
        for (int i = 1; i <= topN; i++)
            oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "F"));
        textAreaConsole.setText(oReport);
    }


    /**
     * Task Zero
     * To be triggered by the "Top 5 (male)" button on the Task Zero Tab
     */
    @FXML
    void doTopM() {
        String oReport = "";
        final int topN = 5;
        int iYear = Integer.parseInt(textfieldYear.getText());
        oReport = String.format("Top %d most popular names (male) in the year %d:\n", topN, iYear);
        for (int i = 1; i <= topN; i++)
            oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "M"));
        textAreaConsole.setText(oReport);
    }



    // ----------------------------- Initialization of UI ------------------------//
    /**
     *  Initialize the content of all the ChoiceBox
     *
     */
    @FXML
    void initialize() {
        // -------------------------- Task2 Initialization ------------------------//
        task2GenderChoiceBox.setValue("M");
        task2GenderChoiceBox.setItems(genderChoice);
        // -------------------------- Task3 Initialization ------------------------//
        task3GenderChoiceBox.setValue("M");
        task3GenderChoiceBox.setItems(genderChoice);
        // -------------------------- Task5 Initialization ------------------------//
        task5iGenderChoiceBox.setValue("M");
        task5iGenderChoiceBox.setItems(genderChoice);
        task5iGenderMateChoiceBox.setValue("M");
        task5iGenderMateChoiceBox.setItems(genderChoice);
        task5iPreferenceChoiceBox.setValue("Young");
        task5iPreferenceChoiceBox.setItems(ageChoice);
        task5AlgorithmChoiceBox.setValue("T5X1");
        task5AlgorithmChoiceBox.setItems(algorithmChoice);
        // -------------------------- Task6 Initialization ------------------------//
        task6SelfGenderBox.setValue("M");
        task6SelfGenderBox.setItems(genderChoice);
        task6MateGenderBox.setValue("F");
        task6MateGenderBox.setItems(genderChoice);
        task6AgePreferenceBox.setValue("Younger");
        task6AgePreferenceBox.setItems(ageChoice2);
        task6AlgorithmChoiceBox.setValue("T6X1");
        task6AlgorithmChoiceBox.setItems(algorithmChoice2);
    }



    // ----------------------------- General Terminal UI Interface ------------------------//

    /**
     * Used to record which button is selected
     */
    Button selectedButton = null;

    /**
     * switch between different buttons and set up UI
     * @param nowSelected the current selected button
     */
    void switchButton(Button nowSelected) {
        if(selectedButton == null) selectedButton = summaryButton;
        if(nowSelected == selectedButton) return;
        selectedButton.setDefaultButton(false);
        VBox.setMargin(selectedButton, new Insets(0, 0, 5, 10));
        nowSelected.setDefaultButton(true);
        VBox.setMargin(nowSelected, new Insets(0, 0, 5, 0));
        selectedButton = nowSelected;
    }

    /**
     * set all charts to invisible, used when switching buttons
     */
    void setAllChartsInvisible() {
        for(Node node : outputPanel.getChildren()) {
            node.setVisible(false);
        }
    }

    /**
     * clean the console, used when switch between tabs(tasks)
     */
    void clearAllCharts() {
        textAreaConsole.clear();
        outputTable.getColumns().clear();
        outputBarChart1.getData().clear();
        outputBarChart2.getData().clear();
        outputPieChart1.getData().clear();
        outputPieChart2.getData().clear();
        outputLineChart1.getData().clear();
        outputLineChart2.getData().clear();
    }

    /**
     * when summary is clicked
     */
    @FXML
    void clickSummary() {
        switchButton(summaryButton);
        setAllChartsInvisible();
        textAreaConsole.setVisible(true);
    }

    /**
     * when table is clicked
     */
    @FXML
    void clickTable() {
        switchButton(tableButton);
        setAllChartsInvisible();
        outputTable.setVisible(true);
    }

    /**
     * when bar chart is clicked
     */
    @FXML
    void clickBar() {
        switchButton(barButton);
        setAllChartsInvisible();
        outputBarChart1.setVisible(true);
        outputBarChart2.setVisible(true);
    }

    /**
     * when pie chart is clicked
     */
    @FXML
    void clickPie() {
        switchButton(pieButton);
        setAllChartsInvisible();
        outputPieChart1.setVisible(true);
        outputPieChart2.setVisible(true);
    }

    /**
     * when line chart is clicked
     */
    @FXML
    void clickLine() {
        switchButton(lineButton);
        setAllChartsInvisible();
        outputLineChart1.setVisible(true);
        outputLineChart2.setVisible(true);
    }

    // ----------------------------- Task1 Function ------------------------//

    /**
     * record if there's any error in user's input
     */
    boolean hasErrorTask1 = false;

    /**
     * check year input
     */
    @FXML
    void doP1YearCheck() {
        String yearFieldText = p1YearField.getText();
        boolean hasError = false;
        if (yearFieldText.isBlank()) {
            p1YearErrorLabel.setText("Please Enter a Year Number");
            hasError = true;
        }
        else if (!StringUtils.isNumeric(yearFieldText) || Integer.parseInt(yearFieldText) > 2019 || Integer.parseInt(yearFieldText) < 1880) {
            p1YearErrorLabel.setText("Please Enter a Number Between 1880 and 2019");
            hasError = true;
        }
        p1YearErrorLabel.setVisible(hasError);
        hasErrorTask1 = hasError;
    }

    /**
     * check n input
     */
    @FXML
    void doP1NCheck() {
        String nFieldText = p1NField.getText();
        boolean hasError = false;
        if (nFieldText.isBlank()) {
            p1NErrorLabel.setText("Please Enter an N number");
            hasError = true;
        }
        else if (!StringUtils.isNumeric(nFieldText) || Integer.parseInt(nFieldText) > 10 || Integer.parseInt(nFieldText) < 1) {
            p1NErrorLabel.setText("Please Enter a Number Between 1 and 10");
            hasError = true;
        }
        p1NErrorLabel.setVisible(hasError);
        hasErrorTask1 = hasError;
    }

    /**
     * when click the submit button, check data and output result
     */
    @FXML
    void doP1Submit() {
        doP1YearCheck();
        doP1NCheck();
        if(hasErrorTask1) return;

        String yearFieldText = p1YearField.getText();
        String nFieldText = p1NField.getText();
        List<String> testX = new ArrayList<>(Arrays.asList("1","2","3","4","5","6"));
        List<Integer> testY = new ArrayList<>(Arrays.asList(1,1,4,5,1,4));

        MostPopularNames task1 = new MostPopularNames();
        if(!task1.setData(Integer.parseInt(yearFieldText), Integer.parseInt(nFieldText)))
            return;

        ChartSetter.BarChartSetter(outputBarChart1, "Male", "Name", "Occurrence", "number of babies", task1.getMaleList());
        ChartSetter.BarChartSetter(outputBarChart2, "Female", "Name", "Occurrence", "number of babies", task1.getFemaleList());
        ChartSetter.PieChartSetter(outputPieChart1, "Male", task1.getMaleList());
        ChartSetter.PieChartSetter(outputPieChart2, "Female", task1.getFemaleList());
    }

    /**
     * when click reset button, clear input box and output console
     */
    @FXML
    void doP1Reset() {
        p1YearField.clear();
        p1NField.clear();
        p1YearErrorLabel.setText("");
        p1YearErrorLabel.setVisible(false);
        p1NErrorLabel.setText("");
        p1NErrorLabel.setVisible(false);
        clearAllCharts();
    }

    // ----------------------------- Task2 Function ------------------------//

    /**
     * record if there's any error in user's input
     */
    boolean hasErrorTask2 = false;

    /**
     * check year1 input
     */
    @FXML
    void doTask2Year1Check() {
        String year1Text = task2Year1TextField.getText();
        boolean hasError = false;
        if (year1Text.isBlank() || !StringUtils.isNumeric(year1Text)) {
            task2Year1ErrorLabel.setText("Please Enter a Year Number");
            hasError = true;
        }
        else if (Integer.parseInt(year1Text) > 2019 || Integer.parseInt(year1Text) < 1880) {
            task2Year1ErrorLabel.setText("Please Enter a Number Between 1880 and 2019");
            hasError = true;
        }
        task2Year1ErrorLabel.setVisible(hasError);
        hasErrorTask2 = hasError;
    }

    /**
     * check year2 input
     */
    @FXML
    void doTask2Year2Check() {
        String year2Text = task2Year2TextField.getText();
        boolean hasError = false;
        if (year2Text.isBlank() || !StringUtils.isNumeric(year2Text) ) {
            task2Year2ErrorLabel.setText("Please Enter a Year Number");
            hasError = true;
        }
        else if (Integer.parseInt(year2Text) > 2019 || Integer.parseInt(year2Text) < 1880) {
            task2Year2ErrorLabel.setText("Please Enter a Number Between 1880 and 2019");
            hasError = true;
        }
        task2Year2ErrorLabel.setVisible(hasError);
        hasErrorTask2 = hasError;
    }

    /**
     * check whether year1 <= year2
     */
    @FXML
    void doTask2YearRelationCheck() {
        String year1Text = task2Year1TextField.getText();
        String year2Text = task2Year2TextField.getText();
        int year1 = Integer.parseInt(year1Text);
        int year2 = Integer.parseInt(year2Text);
        boolean hasError = false;
        if (year1 > year2) {
            task2Year2ErrorLabel.setText("Year2 should be larger than or equal to Year1");
            hasError = true;
        }
        task2Year2ErrorLabel.setVisible(hasError);
        hasErrorTask2 = hasError;
    }

    /**
     * check k input
     */
    @FXML
    void doTask2KCheck() {
        String kText = task2KTextField.getText();
        boolean hasError = false;
        if (kText.isBlank() || !StringUtils.isNumeric(kText) ) {
            task2KErrorLabel.setText("Please Enter an k number");
            hasError = true;
        }
        else if (Integer.parseInt(kText) < 1) {
            task2KErrorLabel.setText("Please Enter a Positive Integer");
            hasError = true;
        }
        task2KErrorLabel.setVisible(hasError);
        hasErrorTask2 = hasError;
    }

    /**
     *  Task Two
     *  To be triggered by the "Submit" button on the Task #2 Tab
     *
     */
    @FXML
    void task2SubmitData(ActionEvent event) {
        doTask2Year1Check();
        doTask2Year2Check();
        doTask2KCheck();
        if(hasErrorTask2) return;

        doTask2YearRelationCheck();
        if(hasErrorTask2) return;

        /*

        String yearFieldText = p1YearField.getText();
        String nFieldText = p1NField.getText();
        List<String> testX = new ArrayList<>(Arrays.asList("1","2","3","4","5","6"));
        List<Integer> testY = new ArrayList<>(Arrays.asList(1,1,4,5,1,4));

        MostPopularNames task1 = new MostPopularNames();
        if(!task1.setData(Integer.parseInt(yearFieldText), Integer.parseInt(nFieldText)))
            return;

        ChartSetter.BarChartSetter(outputBarChart1, "Male", "Name", "Occurrence", "number of babies", task1.getMaleList());
        ChartSetter.BarChartSetter(outputBarChart2, "Female", "Name", "Occurrence", "number of babies", task1.getFemaleList());
        ChartSetter.PieChartSetter(outputPieChart1, "Male", task1.getMaleList());
        ChartSetter.PieChartSetter(outputPieChart2, "Female", task1.getFemaleList());
        */
    }

    /**
     * when click reset button, clear input box and output console
     */
    @FXML
    void task2Reset() {
        task2Year1TextField.clear();
        task2Year2TextField.clear();
        task2KTextField.clear();
        task2Year1ErrorLabel.setText("");
        task2Year1ErrorLabel.setVisible(false);
        task2Year2ErrorLabel.setText("");
        task2Year2ErrorLabel.setVisible(false);
        task2KErrorLabel.setText("");
        task2KErrorLabel.setVisible(false);
        clearAllCharts();
    }

    // ----------------------------- Task3 Function ------------------------//
    /**
     * record if there's any error in user's input
     */
    boolean hasErrorTask3 = false;

    /**
     * check year1 input
     */
    @FXML
    void doTask3Year1Check() {
        String year1Text = task3Year1TextField.getText();
        boolean hasError = false;
        if (year1Text.isBlank() || !StringUtils.isNumeric(year1Text)) {
            task3Year1ErrorLabel.setText("Please Enter a Year Number");
            hasError = true;
        }
        else if (Integer.parseInt(year1Text) > 2019 || Integer.parseInt(year1Text) < 1880) {
            task3Year1ErrorLabel.setText("Please Enter a Number Between 1880 and 2019");
            hasError = true;
        }
        task3Year1ErrorLabel.setVisible(hasError);
        hasErrorTask3 = hasError;
    }

    /**
     * check year2 input
     */
    @FXML
    void doTask3Year2Check() {
        String year2Text = task3Year2TextField.getText();
        boolean hasError = false;
        if (year2Text.isBlank() || !StringUtils.isNumeric(year2Text) ) {
            task3Year2ErrorLabel.setText("Please Enter a Year Number");
            hasError = true;
        }
        else if (Integer.parseInt(year2Text) > 2019 || Integer.parseInt(year2Text) < 1880) {
            task3Year2ErrorLabel.setText("Please Enter a Number Between 1880 and 2019");
            hasError = true;
        }
        task3Year2ErrorLabel.setVisible(hasError);
        hasErrorTask3 = hasError;
    }

    /**
     * check whether year1 <= year2
     */
    @FXML
    void doTask3YearRelationCheck() {
        String year1Text = task3Year1TextField.getText();
        String year2Text = task3Year2TextField.getText();
        int year1 = Integer.parseInt(year1Text);
        int year2 = Integer.parseInt(year2Text);
        boolean hasError = false;
        if (year1 > year2) {
            task3Year2ErrorLabel.setText("Year2 should be larger than or equal to Year1");
            hasError = true;
        }
        task3Year2ErrorLabel.setVisible(hasError);
        hasErrorTask3 = hasError;
    }

    /**
     *  Task Three
     *  To be triggered by the "Submit" button on the Task #2 Tab
     *
     */       
    @FXML
    void task3SubmitData() {
        String report = "";
    	
    	doTask3Year1Check();
        doTask3Year2Check();
        if(hasErrorTask3) return;

        doTask3YearRelationCheck();
        if(hasErrorTask3) return;
        
    	int year1 = Integer.parseInt(task3Year1TextField.getText());
    	int year2 = Integer.parseInt(task3Year2TextField.getText());
    	String name = task3NameTextField.getText();
    	String gender = (String) task3GenderChoiceBox.getValue();
    	
    	PopularityOfNames task3 = new PopularityOfNames();
    	task3.setData(year1, year2, name, gender);
    	task3.findMaxYear();
    	int maxYear = task3.getYear();
    	int maxRank = task3.getRank();
    	int occurrences = task3.getOccurrence();
    	String percentage = task3.getPercentage();
    	
    	report += String.format("The year when the name %s was most popular is %d at rank %d.\n"
				+ "In that year, the number of occurrences is %d,\n"
				+ "which represents %s of total %s births in %d.",
				name, maxYear, maxRank, occurrences, percentage, 
				gender.equals("M")?"male":"female", maxYear);
    	
    	textAreaConsole.setText(report);
    	ChartSetter.BarChartSetter2(outputBarChart1, "Popularity of name", "Year", "Occurrence", "number of babies", task3.getList());
    	ChartSetter.LineChartSetter(outputLineChart1,"Popularity of name", "Year", "Occurrence", "number of babies", task3.getList());
    }
    
    /**
     * when click reset button, clear input box and output console
     */
    @FXML
    void task3Reset() {
        task3Year1TextField.clear();
        task3Year2TextField.clear();
        task3NameTextField.clear();
        task3Year1ErrorLabel.setText("");
        task3Year1ErrorLabel.setVisible(false);
        task3Year2ErrorLabel.setText("");
        task3Year2ErrorLabel.setVisible(false);
        task3NameErrorLabel.setText("");
        task3NameErrorLabel.setVisible(false);
        clearAllCharts();
    }


    // ----------------------------- Task5 Function ------------------------//
    /**
     * record if there's any error in user's input
     */
    boolean hasErrorTask5 = false;

    /**
     * check iName input
     */
    @FXML
    void doTask5iNameCheck() {
        String iName = task5iNameTextField.getText();
        boolean hasError = false;
        if ( iName.isBlank() ) {
            task5iNameErrorLabel.setText("Please Enter a Name");
            hasError = true;
        }
        task5iNameErrorLabel.setVisible(hasError);
        hasErrorTask5 = hasError;
    }

    /**
     * check iAge input
     */
    @FXML
    void doTask5iAgeCheck() {
        String iAgeText = task5iAgeTextField.getText();
        boolean hasError = false;
        if ( iAgeText.isBlank() || !StringUtils.isNumeric(iAgeText) ) {
            task5iAgeErrorLabel.setText("Please Enter an age number");
            hasError = true;
        }
        else if ( Integer.parseInt(iAgeText) < 1){
            task5iAgeErrorLabel.setText("Please Enter a Positive Integer");
            hasError = true;
        }
        task5iAgeErrorLabel.setVisible(hasError);
        hasErrorTask5 = hasError;
    }

    /**
     *  Task Five
     *  To be triggered by the "Submit" button on the Task#5 Tab
     *
     */
    @FXML
    void task5SubmitData(ActionEvent event) {
        doTask5iNameCheck();
        doTask5iAgeCheck();
        if(hasErrorTask5) return;

    }

    /**
     * when click reset button, clear input box and output console
     */
    @FXML
    void task5Reset() {
        task5iNameTextField.clear();
        task5iAgeTextField.clear();
        task5iNameErrorLabel.setText("");
        task5iNameErrorLabel.setVisible(false);
        task5iAgeErrorLabel.setText("");
        task5iAgeErrorLabel.setVisible(false);
        clearAllCharts();
    }
    
    // ----------------------------- Task6 Function ------------------------//
    /**
     * record if there's any error in user's input
     */
    boolean hasErrorTask6 = false;
    
    /**
     * check userName input
     */
    @FXML
    void doTask6UserNameCheck() {
        String userName = task6UserName.getText();
        boolean hasError = false;
        if ( userName.isBlank() ) {
            task6UserNameErrorLabel.setText("Please Enter a Name");
            hasError = true;
        }
        task6UserNameErrorLabel.setVisible(hasError);
        hasErrorTask6 = hasError;
    }
    
    /**
     * check mateName input
     */
    @FXML
    void doTask6MateNameCheck() {
        String mateName = task6MateName.getText();
        boolean hasError = false;
        if ( mateName.isBlank() ) {
            task6MateNameErrorLabel.setText("Please Enter a Name");
            hasError = true;
        }
        task6MateNameErrorLabel.setVisible(hasError);
        hasErrorTask6 = hasError;
    }
    
    /**
     * check selfYOB input
     */
    @FXML
    void doTask6SelfYOBCheck() {
        String selfYOB = task6SelfYOB.getText();
        boolean hasError = false;
        if ( selfYOB.isBlank() || !StringUtils.isNumeric(selfYOB) ) {
            task6SelfYOBErrorLabel.setText("Please Enter an age number");
            hasError = true;
        }
        else if (Integer.parseInt(selfYOB) < 1881 || Integer.parseInt(selfYOB) > 2018) {
        	task6SelfYOBErrorLabel.setText("Please Enter an integer between 1881 and 2018");
            hasError = true;
        }
        
        task6SelfYOBErrorLabel.setVisible(hasError);
        hasErrorTask6 = hasError;
    }
    
    /**
     *  Task Six
     *  To be triggered by the "Submit" button on the Task#6 Tab
     *
     */
    @FXML
    void task6SubmitData() {
        doTask6UserNameCheck();
        doTask6MateNameCheck();
        doTask6SelfYOBCheck();
        if(hasErrorTask6) return; 
        
        String userName = task6UserName.getText();
        String mateName = task6MateName.getText();
        int userYOB = Integer.parseInt(task6SelfYOB.getText());
        String userGender = (String) task6SelfGenderBox.getValue();
        String mateGender = (String) task6MateGenderBox.getValue();
        String agePreference = (String) task6AgePreferenceBox.getValue();
        String algorithm = (String) task6AlgorithmChoiceBox.getValue();
        String isMatch = "";
        String oReport = "";
        PredictScore predictObject = new PredictScore();
        
        if(algorithm == "T6X1") {
        	isMatch = predictObject.predict(userName, mateName);
        	
        	oReport += String.format("There's a study saying that people are perfect "
        			+ "match with each other if their name lengths are the same.\n"
        			+ "Otherwise they are not.\n"
        			+ "So you two's compatible pair score is %s.", isMatch);
        	textAreaConsole.setText(oReport);
        }
        
        else {
        	isMatch = predictObject.predict2(mateName, agePreference, mateGender, userYOB);
        
    		oReport += String.format("The compatible score is %s", isMatch);
        	
        	textAreaConsole.setText(oReport);
        }
        
    } 
    
    /**
     * when click reset button, clear input box and output console
     */
    @FXML
    void task6Reset() {
        task6UserName.clear();
        task6MateName.clear();
        task6UserNameErrorLabel.setText("");
        task6UserNameErrorLabel.setVisible(false);
        task6MateNameErrorLabel.setText("");
        task6MateNameErrorLabel.setVisible(false);
        task6SelfYOBErrorLabel.setText("");
        task6SelfYOBErrorLabel.setVisible(false); 
        clearAllCharts();
    }

}





